{"version":3,"sources":["components/FetchMarkedSong.js","components/Play.js","components/SearchForSong.js","components/PlayList.js","components/SongInfo.js","components/FetchSongList.js","App.js","reportWebVitals.js","index.js"],"names":["FetchMarkedSong","props","state","markedVersions","onDragHandler","bind","onClickHandler","prevProps","prevState","snapshot","a","fetchJsonp","process","this","markedSongId","markedSongs","json","error_code","filterMarkedSongs","response","data","entries","songs","id","markedFiltered","filter","song","marked_recommended","Promise","all","map","mark","showid","fetchShow","show","markedSongTitle","showdate","location","venue","markedRecommended","setState","length","markedId","e","songInfo","date","target","parentNode","dataset","title","text","textContent","addedFromClick","dataTransfer","setData","marked","idx","onDragStart","draggable","data-title","data-date","className","onClick","React","Component","Play","currentTime","audioRef","createRef","togglePlay","manuallyUpdateTime","playNextSong","current","addEventListener","Math","round","duration","document","key","removeEventListener","songToPlay","songSource","mp3","pause","src","load","play","currentSongInfo","show_date","venueName","venue_name","venueLocation","venue_location","playList","findIndex","s","i","currentSongPlayListIndex","undefined","nextSong","paused","value","endTime","ref","getTime","tabIndex","type","min","max","onChange","time","isNaN","floor","slice","SearchForSong","list","songList","onKeyUpHandler","onFocusHandler","onBlurHandler","keyCode","toLowerCase","includes","querySelector","classList","remove","chosenSong","songid","filtered","index","lowerCaseSong","lowerCaseInput","currentTarget","add","relatedTarget","onKeyUp","onFocus","onBlur","PlayList","onDropHandler","onDragOverHandler","playSong","removeFromPlayList","concat","addToPlayList","chosenVersion","copiedList","splice","parseInt","preventDefault","getData","dropEffect","onDrop","onDragOver","info","data-text","SongInfo","currentSong","Fetch","selectedSongVersion","fetch","method","headers","Authorization","catch","err","console","error","showDate","success","songVersion","tracks","fetchedSong","loading","selectSongId","selectSongTitle","timeout","allSongs","songId","songName","playingSongInfo","passCurrentSong","selectSongIdHandler","updatePlayList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.48c013e7.chunk.js","sourcesContent":["import React from 'react';\nimport fetchJsonp from 'fetch-jsonp';\n\nexport default class FetchMarkedSong extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markedVersions: null\n        }\n\n        this.onDragHandler = this.onDragHandler.bind(this);\n        this.onClickHandler = this.onClickHandler.bind(this);\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n\t\tconst markedSongs = await fetchJsonp(`https://api.phish.net/v3/jamcharts/get?apikey=${process.env.REACT_APP_PHISH_NET_KEY}&songid=${this.props.markedSongId}`)\n\t\tconst json = await markedSongs.json()\n        \n        if (this.props.markedSongId !== prevProps.markedSongId) {\n            if (json.error_code === 0) {\n                this.filterMarkedSongs(json.response.data.entries, this.props.markedSongId);\n            }\n        }\n    }\n\n    async filterMarkedSongs(songs, id) {\n        // only get marked song versions\n        const markedFiltered = songs.filter(song => song.marked_recommended > 0 );\n\n        // since the marked songs don't include their location info (state, country, venue)\n        // i have to make another request for this information.\n        // the second async call results in an array of promises, which all need to resolve\n        const markedRecommended = await Promise.all(markedFiltered.map(async song => {\n           const fetchShow = await fetchJsonp(`https://api.phish.net/v3/shows/query?apikey=${process.env.REACT_APP_PHISH_NET_KEY}&showids=${song.showid}&order=ASC`);\n            const show = await fetchShow.json();\n\n            return {\n                'song': this.props.markedSongTitle,\n                'showdate': song.showdate,\n                'location': show.response.data[0].location,\n                'venue': show.response.data[0].venue\n            } \n        }));\n\n        this.setState({\n            markedVersions: markedRecommended.length > 0 ? markedRecommended : false,\n            markedId: id\n        })\n    }\n\n    onClickHandler(e) {\n        const songInfo = [{\n            date: e.target.parentNode.dataset.date,\n            title: e.target.parentNode.dataset.title,\n            text: e.target.parentNode.textContent,\n        }];\n        this.props.addedFromClick(songInfo);\n    }\n   \n    onDragHandler(e) {\n        e.dataTransfer.setData('text/plain', e.target.textContent);\n        e.dataTransfer.setData('application/title', e.target.dataset.title);\n        e.dataTransfer.setData('application/date', e.target.dataset.date);\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Select a Version</h2>\n               <p>{this.props.markedSongTitle}</p>\n                {\n                  !this.state.markedVersions ? <p>🤷‍♂️ &nbsp; sorry, no marked versions</p> :\n                    this.state.markedVersions.map((marked, idx) => {\n                        return (\n                           <div\n                                key={idx}\n                                onDragStart={this.onDragHandler}\n                                draggable=\"true\"\n                                data-title={this.props.markedSongTitle}\n                                data-date={marked.showdate}\n                                className=\"marked__song\"\n                            >\n                            <p \n                                onClick={this.onClickHandler}>\n                                    {marked.showdate}<br/>&nbsp;{marked.venue}<br/>&nbsp; {marked.location}</p>\n                           </div>\n                        )\n                    })\n                  } \n                \n\n            </>\n        )\n    }\n}","import React from 'react';\n\nexport default class Play extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state  = {\n            currentTime: 0\n        }\n\n        this.audioRef = React.createRef();\n        this.togglePlay = this.togglePlay.bind(this);\n        this.manuallyUpdateTime = this.manuallyUpdateTime.bind(this);\n        this.playNextSong = this.playNextSong.bind(this);\n    }\n\n    componentDidMount() {\n        this.audioRef.current.addEventListener(\"timeupdate\", e => {\n            this.setState({\n                currentTime: Math.round(e.target.currentTime),\n                duration: Math.round(e.target.duration)\n            });\n        });\n        document.addEventListener('keydown', e => {\n            if (e.key === ' ') {\n                this.togglePlay()\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        this.audioRef.current.removeEventListener(\"timeupdate\", () => {});\n        document.removeEventListener(\"keydown\", () => {});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // there's only ever one song to play from clicking play button\n        if(this.props.songToPlay !== prevProps.songToPlay) {\n            const songToPlay = this.props.songToPlay[0];\n            const songSource = this.props.songToPlay !== null ? songToPlay.mp3 : null;\n            if (this.audioRef.current) {\n                this.audioRef.current.pause(); \n                this.audioRef.current.src = songSource;\n                this.audioRef.current.load(); \n                this.audioRef.current.play();\n\n                this.props.currentSongInfo(\n                    {\n                     title: this.props.songToPlay[0].title, \n                     date: this.props.songToPlay[0].show_date, \n                     venueName: this.props.songToPlay[0].venue_name, \n                     venueLocation: this.props.songToPlay[0].venue_location}\n                    );\n            }\n\n            this.props.playList.findIndex((s, i)=> {\n                if (songToPlay.title === s.title && songToPlay.show_date === s.date) {\n                    this.setState({\n                        currentSongPlayListIndex: i\n                    });\n                } \n            });\n        }\n        // play next song in playlist after current song is over.\n        if (this.state && this.state.currentTime !== undefined && this.state.currentTime === this.state.duration) {\n            this.audioRef.current.pause();\n            if (this.props.playList.length > 0) {\n                this.playNextSong();\n            }\n        }\n\n        if (this.state.currentTime !== prevState.currentTime) {\n            this.setState({\n                currentTime: this.state.currentTime\n            });\n        }\n    }\n\n    playNextSong(e) {\n        let nextSong;\n        if (e && e.target.id === 'prev') {\n            nextSong = this.props.playList[this.state.currentSongPlayListIndex-1];\n        }\n        else {\n            nextSong = this.props.playList[this.state.currentSongPlayListIndex+1];\n        }\n\n        if (nextSong !== undefined) {\n            this.setState({\n                currentTime: 0,\n                duration: 1\n            }); \n            this.props.nextSong(nextSong);\n        }\n    }\n\n    updateTime() {\n        this.setState({\n            currentTime: this.state.currentTime\n        })\n    }\n\n    togglePlay() {\n        if (this.audioRef.current) {\n            if (this.audioRef.current.paused) {\n                this.audioRef.current.play();\n            } else {\n                this.audioRef.current.pause();\n            }\n        }\n    }\n\n    manuallyUpdateTime(e) {\n        if (this.audioRef.current.src !== \"\") {\n            this.audioRef.current.currentTime = e.target.value;\n        }\n    }\n\n    render() {\n        const endTime = this.state.duration !== null ? this.state.duration : 0;\n        return (\n            <header>\n               <div className=\"logo\">Jamdora</div>\n               <div className=\"controls\">\n                    <audio ref={this.audioRef}></audio>\n                    <div className=\"btn controls__previous\" onClick={this.playNextSong} id=\"prev\"></div>\n                    <div className=\"btn controls__play-container\" onClick={this.togglePlay}><div className=\"controls__play\"></div></div>\n                    <div className=\"btn controls__next\" onClick={this.playNextSong} id=\"next\"></div>\n                </div>\n               <div className=\"time\"> \n                        <div className=\"time__start\"> {\n                            `${getTime(this.state.currentTime)}`\n                            } </div>\n                        <div className=\"time__duration duration\"\n                            tabIndex={-1}\n                        >\n                        <input \n                            type=\"range\" \n                            min={0} \n                            value={this.state.currentTime}\n                            max={endTime} \n                            className=\"duration__elapsed\"\n                            onChange={this.manuallyUpdateTime}\n                        />\n                        </div>\n                        <div className=\"time__end\"> {getTime(endTime)} </div>\n                    </div>\n            </header>\n        )\n    }\n}\n\n// found nifty timer function from here:\n// https://dev.to/ma5ly/lets-make-a-little-audio-player-in-react-p4p\nfunction getTime(time) {\n    if(!isNaN(time)) {\n      return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n    }\n    return '0:00';\n  }","import React from 'react';\n\nexport default class SearchForSong extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            list: this.props.songList\n        }\n\n        this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n        this.onFocusHandler = this.onFocusHandler.bind(this);\n        this.onBlurHandler = this.onBlurHandler.bind(this);\n        this.onClickHandler = this.onClickHandler.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onKeyUpHandler(e) {\n        if(e.keyCode === 13) {\n                const song = this.props.songList.filter(song => {\n                const lower = song.song.toLowerCase();\n                if (lower.includes(e.target.value)) {\n                    document.querySelector('.dropdown').classList.remove('active'); \n                    return song;\n                }\n                return null;\n            });\n\n            if (song.length && song.length < 2) {\n                this.props.chosenSong(song[0].songid, song[0].song);\n            } \n        }\n\n        \n    }\n\n    onChange(e) {\n        const filtered = this.props.songList.filter((song, index) => {\n            let lowerCaseSong = song.song.toLowerCase();\n            let lowerCaseInput = e.target.value.toLowerCase();\n            if (lowerCaseInput !== \"\") {\n                if(lowerCaseSong.includes(lowerCaseInput)) {\n                    return song\n                }\n            }\n            \n        });\n        this.setState({\n            list: filtered\n        });\n\n    }\n\n    onFocusHandler(e) {\n        if(e.currentTarget === e.target) {\n            document.querySelector('.dropdown').classList.add('active');\n        }\n    }\n    \n    onBlurHandler(e) {\n        if (e.relatedTarget == null) {\n            // reset song list if user has filtered by typing\n            // but then clicked out of the input box\n            this.setState({\n                list: this.props.songList\n            })\n            document.querySelector('.dropdown').classList.remove('active'); \n        }\n    }\n\n    onClickHandler(e) {\n        document.querySelector('.dropdown').classList.remove('active'); \n        this.props.chosenSong(e.target.id, e.target.textContent);\n    }\n    \n    render() {\n        return (\n            <div className=\"songs__all\">\n                <input\n                    type=\"text\" \n                    onKeyUp={this.onKeyUpHandler}\n                    onFocus={this.onFocusHandler}\n                    onBlur={this.onBlurHandler}\n                    onChange={this.onChange}\n                />\n                <ul \n                    className=\"dropdown\"\n                    tabIndex=\"-1\"\n                >\n                    {\n                       \n                         this.state.list && this.state.list.map((song, index) => {\n                            return <li \n                                onClick={this.onClickHandler} \n                                onBlur={this.onBlurHandler}\n                                key={song.songid} \n                                id={song.songid} \n                                className=\"dropdown__item\" \n                                tabIndex={index}>{song.song}</li>\n                        }) \n                    }\n                </ul>\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport SavePlaylistLocalStorage from './SavePlaylistLocalStorage';\n\nexport default class PlayList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playList: []\n        }\n        this.onDropHandler = this.onDropHandler.bind(this);\n        this.onDragOverHandler = this.onDragOverHandler.bind(this);\n        this.playSong = this.playSong.bind(this);\n        this.removeFromPlayList = this.removeFromPlayList.bind(this);\n    }\n\n     componentDidUpdate(prevProps, prevState) {\n         if (prevProps.addedFromClick !== this.props.addedFromClick) {\n            this.setState({\n                playList: this.state.playList.concat(this.props.addedFromClick)\n            }, e => {\n                this.props.addToPlayList(this.state.playList);\n            });\n        }\n     }\n    \n    playSong(e) {\n        const chosenSong = {\n            date: e.target.dataset.date,\n            title: e.target.dataset.title,\n            text: e.target.dataset.text\n        }\n        this.props.chosenVersion(chosenSong);\n    }\n\n    removeFromPlayList(e) {\n        let copiedList = [...this.state.playList];\n        copiedList.splice(parseInt(e.target.id), 1); \n        this.setState({\n            playList: copiedList\n        });\n    }\n\n    onDropHandler(e) {\n        e.preventDefault();\n        const text = e.dataTransfer.getData(\"text/plain\");\n        const title = e.dataTransfer.getData(\"application/title\");\n        const date = e.dataTransfer.getData(\"application/date\");\n        this.setState({\n            playList: this.state.playList.concat({'title': title, 'text': text, 'date': date})\n        }, e => {\n            this.props.addToPlayList(this.state.playList);\n        });\n\n    }\n\n    onDragOverHandler(e) {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n    }\n\n    render() {\n        return (\n            <div className=\"playlist\">\n                <h2>Playlist</h2>\n                <div\n                    onDrop={this.onDropHandler} \n                    onDragOver={this.onDragOverHandler}\n                    id=\"target\"\n                    className=\"playlist__zone\"\n                >\n\n                    {\n                        this.state.playList.map((info, index) => {\n                            return (\n                                <p key={index}>\n                                    <div>{info.title}</div>\n                                        {info.text}<br></br>\n                                        <div onClick={this.removeFromPlayList} \n\t\t\t\t\t\tid={index} \n\t\t\t\t\t\tclassName=\"btn btn-playlist btn-remove\">Remove x</div>\n                                        <div \n                                            className=\"btn btn-playlist btn-play\"\n                                            data-title={info.title}\n                                            data-date={info.date}\n                                            data-text={info.text}\n                                            onClick={this.playSong}>Play &gt;\n                                        </div>\n                                    </p>\n                                )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default function SongInfo(song) {\n    return (\n        <div className=\"current-song__container container\">\n            <h2>Song Info</h2>\n            <div>{song.currentSong && song.currentSong.title}</div>\n            <div>{song.currentSong && song.currentSong.date}</div>\n            <div>{song.currentSong && song.currentSong.venueName}</div>\n            <div>{song.currentSong && song.currentSong.venueLocation}</div>\n        </div>\n    )\n}","import React from 'react';\n//import AllSelectList from './AllSelectList';\nimport FetchMarkedSong from './FetchMarkedSong';\nimport Play from './Play'\nimport SearchForSong from './SearchForSong';\nimport PlayList from './PlayList';\nimport fetchJsonp from 'fetch-jsonp'\nimport SongInfo from './SongInfo';\n\n\nexport default class Fetch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\t\n\t\tthis.state = {\n\t\t\tloading: true,\n\t\t\tselectSongId: null,\n\t\t\tselectSongTitle: null,\n\t\t\tsongVersion: null,\n\t\t\tplayList: [],\n\t\t\taddedFromClick: []\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\tconst allSongs = await fetchJsonp(`https://api.phish.net/v3/jamcharts/all?apikey=${process.env.REACT_APP_PHISH_NET_KEY}`, {\n\t\t\tmethod: 'POST',\n\t\t\ttimeout: 3000,\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n\t\t}).catch(err => console.error(err));\n\n\t\tconst json = await allSongs.json()\n\n\t\tthis.setState({ songs: json.response.data, loading: false });\n\t}\t\n\n\tupdatePlayList(songs) {\n\t\tthis.setState({\n\t\t\tplayList: [...songs]\n\t\t});\n\t}\n\t\n\taddedFromClick(songs) {\n\t\tthis.setState({\n\t\t\taddedFromClick: [...songs]\n\t\t});\n\t}\n\n    selectSongIdHandler(songId, songName) {\n        this.setState({\n            selectSongId: songId, \n\t\t\tselectSongTitle: songName\n        })\n    }\n\n\tselectedSongVersion = async (song) => {\n\t\tconst showDate = await fetch(`https://phish.in/api/v1/shows/${song.date}`, {\n\t\t\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\tAuthorization: `Bearer ${process.env.REACT_APP_PHISH_IN_KEY}`,\n\t\t\t\t\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(err => console.error(err));\n\t\tconst json\t= await showDate.json();\n\n\t\tif (json.success) {\n\t\t\t\n\t\t\tconst songVersion = json.data.tracks.filter(fetchedSong => fetchedSong.title === song.title);\n\t\t\tthis.setState({\n\t\t\t\tsongVersion: songVersion\n\t\t\t});\n\t\t}\n\n\t}\n\n\tpassCurrentSong(songInfo) {\n\t\tthis.setState({\n\t\t\tplayingSongInfo: songInfo\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Play \n\t\t\t\t\tsongToPlay={this.state.songVersion}\n\t\t\t\t\tplayList={this.state.playList}\n\t\t\t\t\tnextSong={this.selectedSongVersion}\n\t\t\t\t\tcurrentSongInfo={e => this.passCurrentSong(e)}\n\t\t\t\t/>\n\t\t\t\t<SongInfo currentSong={this.state.playingSongInfo}/>\n\t\t\t\t<div className=\"search-song__container container\">\n\t\t\t\t\t<h2>Search for Song</h2>\n\t\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.loading || !this.state.songs ?\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<SearchForSong \n\t\t\t\t\t\t\t\tsongList={this.state.songs} \n\t\t\t\t\t\t\t\tchosenSong={(i, s) => this.selectSongIdHandler(i, s)}\t\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\t\n\n\t\t\t\t<div className=\"marked-song__container container\">\n\t\t\t\t\t<FetchMarkedSong \n\t\t\t\t\t\tmarkedSongId={this.state.selectSongId}\n\t\t\t\t\t\tmarkedSongTitle={this.state.selectSongTitle}\n\t\t\t\t\t\t// updates when user has clicked on song\n\t\t\t\t\t\taddedFromClick={(e) => this.addedFromClick(e)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"playlist__container container\">\n\t\t\t\t\t<PlayList\n\t\t\t\t\t\tchosenVersion={(song) => this.selectedSongVersion(song)}\n\t\t\t\t\t\t// pass clicked song from parent to component\n\t\t\t\t\t\taddedFromClick={this.state.addedFromClick}\n\t\t\t\t\t\t// updates when song has been dropped\n\t\t\t\t\t\taddToPlayList={e => this.updatePlayList(e)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t) \n\t}\n\n};\n\n","import FetchSongList from './components/FetchSongList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FetchSongList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
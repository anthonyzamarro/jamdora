{"version":3,"sources":["components/FetchMarkedSong.js","components/Play.js","components/SearchForSong.js","components/PlayList.js","components/FetchSongList.js","App.js","reportWebVitals.js","index.js"],"names":["FetchMarkedSong","props","state","markedVersions","onDragHandler","bind","onClickHandler","prevProps","prevState","snapshot","a","fetch","process","this","markedSongId","markedSongs","json","error_code","filterMarkedSongs","response","data","entries","songs","id","markedFiltered","filter","song","marked_recommended","Promise","all","map","mark","showid","fetchShow","show","markedSongTitle","showdate","location","venue","markedRecommended","setState","length","markedId","e","songInfo","date","target","parentNode","dataset","title","text","textContent","addedFromClick","dataTransfer","setData","className","marked","idx","onDragStart","onClick","draggable","data-title","data-date","React","Component","Play","currentTime","audioRef","createRef","updateTime","togglePlay","manuallyUpdateTime","playNextSong","current","addEventListener","Math","round","duration","removeEventListener","songToPlay","songSource","mp3","pause","src","load","play","playList","findIndex","s","i","show_date","currentSongPlayListIndex","undefined","nextSong","paused","value","endTime","ref","getTime","tabIndex","type","min","max","onChange","time","isNaN","floor","slice","SearchForSong","list","songList","onKeyUpHandler","onFocusHandler","onBlurHandler","keyCode","toLowerCase","includes","document","querySelector","classList","remove","chosenSong","songid","filtered","index","lowerCaseSong","lowerCaseInput","currentTarget","add","relatedTarget","onKeyUp","onFocus","onBlur","PlayList","onDropHandler","onDragOverHandler","playSong","removeFromPlayList","concat","addToPlayList","chosenVersion","copiedList","splice","parseInt","preventDefault","getData","dropEffect","onDrop","onDragOver","info","Fetch","selectedSongVersion","songTitle","headers","Authorization","catch","err","console","log","showDate","songVersion","tracks","loading","selectSongId","selectSongTitle","allSongs","songId","songName","selectSongIdHandler","updatePlayList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a6e5aa3e.chunk.js","sourcesContent":["import React from 'react';\n//import unslug from '../utils/unslug.js';\n\nexport default class FetchMarkedSong extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markedVersions: null\n        }\n\n        this.onDragHandler = this.onDragHandler.bind(this);\n        this.onClickHandler = this.onClickHandler.bind(this);\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n\t\tconst markedSongs = await fetch(`https://api.phish.net/v3/jamcharts/get?apikey=${process.env.REACT_APP_PHISH_NET_KEY}&songid=${this.props.markedSongId}`)\n\t\tconst json = await markedSongs.json()\n        \n        if (this.props.markedSongId !== prevProps.markedSongId) {\n            if (json.error_code === 0) {\n                this.filterMarkedSongs(json.response.data.entries, this.props.markedSongId);\n            }\n        }\n    }\n\n    async filterMarkedSongs(songs, id) {\n        // only get marked song versions\n        const markedFiltered = songs.filter(song => song.marked_recommended > 0 );\n\n        // since the marked songs don't include their location info (state, country, venue)\n        // i have to make another request for this information.\n        // the second async call results in an array of promises, which all need to resolve\n        const markedRecommended = await Promise.all(markedFiltered.map(async song => {\n           const fetchShow = await fetch(`https://api.phish.net/v3/shows/query?apikey=${process.env.REACT_APP_PHISH_NET_KEY}&showids=${song.showid}&order=ASC`);\n            const show = await fetchShow.json();\n\n            return {\n                'song': this.props.markedSongTitle,\n                'showdate': song.showdate,\n                'location': show.response.data[0].location,\n                'venue': show.response.data[0].venue\n            } \n        }));\n\n        this.setState({\n            markedVersions: markedRecommended.length > 0 ? markedRecommended : false,\n            markedId: id\n        })\n    }\n\n    onClickHandler(e) {\n        const songInfo = [{\n            date: e.target.parentNode.dataset.date,\n            title: e.target.parentNode.dataset.title,\n            text: e.target.parentNode.textContent,\n        }];\n        this.props.addedFromClick(songInfo);\n    }\n   \n    onDragHandler(e) {\n        e.dataTransfer.setData('text/plain', e.target.textContent);\n        e.dataTransfer.setData('application/title', e.target.dataset.title);\n        e.dataTransfer.setData('application/date', e.target.dataset.date);\n    }\n\n    render() {\n        return (\n            <div className=\"song__marked\">\n                <h2>Select a Version</h2>\n               <p>{this.props.markedSongTitle}</p>\n                {\n                  !this.state.markedVersions ? <p>🤷‍♂️ &nbsp; sorry, no marked versions</p> :\n                    this.state.markedVersions.map((marked, idx) => {\n                        return (\n                           <div\n                                key={idx}\n                                onDragStart={this.onDragHandler}\n                                onClick={this.onClickHandler}\n                                draggable=\"true\"\n                                data-title={this.props.markedSongTitle}\n                                data-date={marked.showdate}\n                            >\n                                \n                                <p>{marked.showdate} <br></br>{marked.venue} <span> &nbsp; {marked.location} </span></p>\n                           </div>\n                        )\n                    })\n                  } \n                \n\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Play extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state  = {\n            currentTime: 0\n        }\n\n        this.audioRef = React.createRef();\n        this.updateTime = this.updateTime.bind(this);\n        this.togglePlay = this.togglePlay.bind(this);\n        this.manuallyUpdateTime = this.manuallyUpdateTime.bind(this);\n        this.playNextSong = this.playNextSong.bind(this);\n        // this.playpPreviousSong = this.playpPreviousSong.bind(this);\n    }\n\n    componentDidMount() {\n        this.audioRef.current.addEventListener(\"timeupdate\", e => {\n            this.setState({\n                currentTime: Math.round(e.target.currentTime),\n                duration: Math.round(e.target.duration)\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        this.audioRef.current.removeEventListener(\"timeupdate\", () => {});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // there's only ever one song to play from clicking play button\n        if(this.props.songToPlay !== prevProps.songToPlay) {\n            const songToPlay = this.props.songToPlay[0];\n            const songSource = this.props.songToPlay !== null ? songToPlay.mp3 : null;\n            if (this.audioRef.current) {\n                this.audioRef.current.pause(); \n                this.audioRef.current.src = songSource;\n                this.audioRef.current.load(); \n                this.audioRef.current.play();\n            }\n\n            this.props.playList.findIndex((s, i)=> {\n                if (songToPlay.title === s.title && songToPlay.show_date === s.date) {\n                    this.setState({\n                        currentSongPlayListIndex: i\n                    });\n                } \n            });\n        }\n        // play next song in playlist after current song is over.\n        if (this.state && this.state.currentTime !== undefined && this.state.currentTime === this.state.duration) {\n            this.audioRef.current.pause();\n            if (this.props.playList.length > 0) {\n                this.playNextSong();\n                // console.log(this.state.currentSongPlayListIndex);\n                // const nextSong = this.props.playList[this.state.currentSongPlayListIndex+1];\n                //  if (nextSong !== undefined) {\n                //      this.setState({\n                //          currentTime: 0,\n                //          duration: 1\n                //     });\n                //     this.props.nextSong(nextSong.date, nextSong.title);\n                //  }\n            }\n        }\n\n        if (this.state.currentTime !== prevState.currentTime) {\n            this.updateTime();\n        }\n    }\n\n    playNextSong(e) {\n        let nextSong;\n        if (e && e.target.id === 'prev') {\n            nextSong = this.props.playList[this.state.currentSongPlayListIndex-1];\n        }\n         else {\n            nextSong = this.props.playList[this.state.currentSongPlayListIndex+1];\n        }\n        if (nextSong !== undefined) {\n            this.setState({\n                currentTime: 0,\n                duration: 1\n            });\n            this.props.nextSong(nextSong.date, nextSong.title);\n        }\n    }\n\n    updateTime() {\n        this.setState({\n            currentTime: this.state.currentTime\n        })\n    }\n\n    togglePlay() {\n        if (this.audioRef.current) {\n            if (this.audioRef.current.paused) {\n                this.audioRef.current.play();\n            } else {\n                this.audioRef.current.pause();\n            }\n        }\n    }\n\n    manuallyUpdateTime(e) {\n        if (this.audioRef.current.src !== \"\") {\n            this.audioRef.current.currentTime = e.target.value;\n        }\n    }\n\n    render() {\n        const title =  this.props.songToPlay && this.props.songToPlay[0].title;\n        const date  =  this.props.songToPlay && this.props.songToPlay[0].show_date;\n        const endTime = this.state.duration !== null ? this.state.duration : 0;\n        return (\n            <header>\n               <div className=\"controls\">\n                    <audio ref={this.audioRef} className=\"controls__play\"></audio>\n                    <div className=\"controls__previous\" onClick={this.playNextSong} id=\"prev\"> &lt; </div>\n                    <div className=\"controls__play\" onClick={this.togglePlay}> |&gt; </div>\n                    <div className=\"controls__next\" onClick={this.playNextSong} id=\"next\"> &gt; </div>\n                </div>\n               <div className=\"time\"> \n                        <div className=\"time__start\"> {\n                            `${getTime(this.state.currentTime)}`\n                            } </div>\n                        <div className=\"time__duration duration\"\n                            tabIndex={-1}\n                        >\n                        <input \n                            type=\"range\" \n                            min={0} \n                            value={this.state.currentTime}\n                            max={endTime} \n                            className=\"duration__elapsed\"\n                            onChange={this.manuallyUpdateTime}\n                        />\n                        </div>\n                        <div className=\"time__end\"> {getTime(endTime)} </div>\n                    </div>\n               <div className=\"song__info\">\n                    <p>{title}</p>\n                    <p>{date}</p>\n                </div>\n            </header>\n        )\n    }\n}\n\n// found nifty timer function from here:\n// https://dev.to/ma5ly/lets-make-a-little-audio-player-in-react-p4p\n// Below is my original one which only really worked for the duration time\nfunction getTime(time) {\n    if(!isNaN(time)) {\n      return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n    }\n    return '0:00';\n  }\n\n// function formatDurationTime(time) {\n//     if (time > 0) {\n//         time = (time / 60).toFixed(2);\n//         time = time.split('.');\n//         let seconds = parseInt(time[1]);\n//         let minutes = parseInt(time[0]);\n//         seconds = 100 - seconds;\n//         return `${minutes}:${seconds < 10 ? '0' + seconds : seconds }`;\n//     }\n//     return `0:00`;\n// }\n","import React from 'react';\n\nexport default class SearchForSong extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            list: this.props.songList\n        }\n\n        this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n        this.onFocusHandler = this.onFocusHandler.bind(this);\n        this.onBlurHandler = this.onBlurHandler.bind(this);\n        this.onClickHandler = this.onClickHandler.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onKeyUpHandler(e) {\n        if(e.keyCode === 13) {\n                const song = this.props.songList.filter(song => {\n                const lower = song.song.toLowerCase();\n                if (lower.includes(e.target.value)) {\n                    document.querySelector('.dropdown').classList.remove('active'); \n                    return song;\n                }\n                return null;\n            });\n\n            if (song.length && song.length < 2) {\n                this.props.chosenSong(song[0].songid, song[0].song);\n            } \n        }\n\n        \n    }\n\n    onChange(e) {\n        const filtered = this.props.songList.filter((song, index) => {\n            let lowerCaseSong = song.song.toLowerCase();\n            let lowerCaseInput = e.target.value.toLowerCase();\n            if (lowerCaseInput !== \"\") {\n                if(lowerCaseSong.includes(lowerCaseInput)) {\n                    return song\n                }\n            }\n            \n        });\n        this.setState({\n            list: filtered\n        });\n\n    }\n\n    onFocusHandler(e) {\n        if(e.currentTarget === e.target) {\n            document.querySelector('.dropdown').classList.add('active');\n        }\n    }\n    \n    onBlurHandler(e) {\n        if (e.relatedTarget == null) {\n            // reset song list if user has filtered by typing\n            // but then clicked out of the input box\n            this.setState({\n                list: this.props.songList\n            })\n            document.querySelector('.dropdown').classList.remove('active'); \n        }\n    }\n\n    onClickHandler(e) {\n        document.querySelector('.dropdown').classList.remove('active'); \n        this.props.chosenSong(e.target.id, e.target.textContent);\n    }\n    \n    render() {\n        return (\n            <div className=\"songs__all\">\n                <input\n                    type=\"text\" \n                    onKeyUp={this.onKeyUpHandler}\n                    onFocus={this.onFocusHandler}\n                    onBlur={this.onBlurHandler}\n                    onChange={this.onChange}\n                />\n                <ul \n                    className=\"dropdown\"\n                    tabIndex=\"-1\"\n                >\n                    {\n                       \n                         this.state.list && this.state.list.map((song, index) => {\n                            return <li \n                                onClick={this.onClickHandler} \n                                onBlur={this.onBlurHandler}\n                                key={song.songid} \n                                id={song.songid} \n                                className=\"dropdown__item\" \n                                tabIndex={index}>{song.song}</li>\n                        }) \n                    }\n                </ul>\n            </div>\n        )\n    }\n\n}","import React from 'react';\n\nexport default class PlayList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playList: []\n        }\n        this.onDropHandler = this.onDropHandler.bind(this);\n        this.onDragOverHandler = this.onDragOverHandler.bind(this);\n        this.playSong = this.playSong.bind(this);\n        this.removeFromPlayList = this.removeFromPlayList.bind(this);\n    }\n\n     componentDidUpdate(prevProps, prevState) {\n         if (prevProps.addedFromClick !== this.props.addedFromClick) {\n            this.setState({\n                playList: this.state.playList.concat(this.props.addedFromClick)\n            }, e => {\n                this.props.addToPlayList(this.state.playList);\n            });\n        }\n     }\n    \n    playSong(e) {\n        this.props.chosenVersion(e.target.dataset.date, e.target.dataset.title);\n    }\n\n    removeFromPlayList(e) {\n        let copiedList = [...this.state.playList];\n        copiedList.splice(parseInt(e.target.id), 1); \n        this.setState({\n            playList: copiedList\n        });\n    }\n\n    onDropHandler(e) {\n        e.preventDefault();\n        const text = e.dataTransfer.getData(\"text/plain\");\n        const title = e.dataTransfer.getData(\"application/title\");\n        const date = e.dataTransfer.getData(\"application/date\");\n        this.setState({\n            playList: this.state.playList.concat({'title': title, 'text': text, 'date': date})\n        }, e => {\n            this.props.addToPlayList(this.state.playList);\n        });\n\n    }\n\n    onDragOverHandler(e) {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n    }\n\n    render() {\n        return (\n            <div className=\"playlist\">\n                <h2>Play List</h2>\n                <div\n                    onDrop={this.onDropHandler} \n                    onDragOver={this.onDragOverHandler}\n                    id=\"target\"\n                    className=\"playlist__zone\"\n                >\n\n                    {\n                        this.state.playList.map((info, index) => {\n                            return (\n                                <p key={index}>\n                                    <span onClick={this.removeFromPlayList} id={index}>X Remove&nbsp; </span>\n                                    <span>{info.title}</span> \n                                        {info.text} \n                                        <span \n                                            data-title={info.title}\n                                            data-date={info.date} \n                                            onClick={this.playSong}>&nbsp; Play &gt;\n                                        </span>\n                                    </p>\n                                )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n//import AllSelectList from './AllSelectList';\nimport FetchMarkedSong from './FetchMarkedSong';\nimport Play from './Play'\nimport SearchForSong from './SearchForSong';\nimport PlayList from './PlayList';\n\n\nexport default class Fetch extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\t\n\t\tthis.state = {\n\t\t\tloading: true,\n\t\t\tselectSongId: null,\n\t\t\tselectSongTitle: null,\n\t\t\tsongVersion: null,\n\t\t\tplayList: [],\n\t\t\taddedFromClick: []\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\tconst allSongs = await fetch(`https://api.phish.net/v3/jamcharts/all?apikey=${process.env.REACT_APP_PHISH_NET_KEY}`)\n\t\tconst json = await allSongs.json()\n\n\t\tthis.setState({ songs: json.response.data, loading: false });\n\t}\t\n\n\tupdatePlayList(songs) {\n\t\tthis.setState({\n\t\t\tplayList: this.state.playList.concat(songs)\n\t\t}, e => console.log(this.state.playList));\n\t}\n\t\n\taddedFromClick(songs) {\n\t\tthis.setState({\n\t\t\taddedFromClick: [...songs]\n\t\t});\n\t}\n\n    selectSongIdHandler(songId, songName) {\n        this.setState({\n            selectSongId: songId, \n\t\t\tselectSongTitle: songName\n        })\n    }\n\n\tselectedSongVersion = async (showdate, songTitle) => {\n\t\tconst showDate = await fetch(`http://phish.in/api/v1/shows/${showdate}`, {\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\tAuthorization: `Bearer ${process.env.REACT_APP_PHISH_IN_KEY}`\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}).catch(err => console.log(err))\n\t\tconst json\t= await showDate.json();\n\n\n\t\tconst songVersion = json.data.tracks.filter(song => song.title === songTitle);\n\t\tthis.setState({\n\t\t\tsongVersion: songVersion\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\n\t\t\t\t<div className=\"logo\">Jamdora</div>\n\t\t\t\t<Play \n\t\t\t\t\tsongToPlay={this.state.songVersion}\n\t\t\t\t\tplayList={this.state.playList}\n\t\t\t\t\tnextSong={this.selectedSongVersion}\n\t\t\t\t/>\n\t\t\t\t<div className=\"search-song__container container\">\n\t\t\t\t\t<h2>Search for Song</h2>\n\t\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.loading || !this.state.songs ?\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<SearchForSong \n\t\t\t\t\t\t\t\tsongList={this.state.songs} \n\t\t\t\t\t\t\t\tchosenSong={(i, s) => this.selectSongIdHandler(i, s)}\t\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t</div>\t\n\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<FetchMarkedSong \n\t\t\t\t\t\tmarkedSongId={this.state.selectSongId}\n\t\t\t\t\t\tmarkedSongTitle={this.state.selectSongTitle}\n\t\t\t\t\t\t// updates when user has clicked on song\n\t\t\t\t\t\taddedFromClick={(e) => this.addedFromClick(e)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<PlayList\n\t\t\t\t\t\tchosenVersion={(showDate, songTitle) => this.selectedSongVersion(showDate, songTitle)}\n\t\t\t\t\t\t// pass clicked song from parent to component\n\t\t\t\t\t\taddedFromClick={this.state.addedFromClick}\n\t\t\t\t\t\t// updates when song has been dropped\n\t\t\t\t\t\taddToPlayList={e => this.updatePlayList(e)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t) \n\t}\n\n};\n\n","import FetchSongList from './components/FetchSongList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FetchSongList />\n\n      <footer>\n        <h1>Jamdora</h1>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}